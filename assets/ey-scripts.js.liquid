$(document).ready(function () {
  if ($("input.sequenceAddOnCheckbox").is(":checked")) {
    // console.log("checkbox is checked");
  } else {
    // console.log("checkbox is not checked");
  }

  $("input.sequenceAddOnCheckbox").change(function () {
    Shopify.addItem(32142087290961, 1);
  });

  // Bonus Rewards
  checkCartForBonusReward();
});

function checkCartForBonusReward() {
  const levels = [150, 200, 300, 400, 500, 600, 750, 1000, 1250, 1500];
  let bonusId = '';
  let bonusTotal = 0;

  // Get cart
  $.getJSON('/cart.js', cart => {
    console.log(cart);
    let finalLoop = 0;
    cart.items.forEach(item => {

      // Get bonus item in cart
      let firstString = item.sku.split('-');
      if (firstString[0] === 'bonusreward') {
        cartRewardPresent = true;
        bonusId = item.id;
      };

      // Get item tags
      let url = item.url;
      let quantity = item.quantity;

      let settings = {
        type: "GET",
        url: url + ".js",
        contentType: "application/json",
        dataType: "json",
      };

      $.ajax(settings).done(results => {
        let tags = results.product.tags;
        tags = tags.split(", ");
        for (let i = 0; i < tags.length; i++) {
          if (tags[i] == "FW" || tags[i] == "FWSEQ") {
            bonusTotal = bonusTotal +
                         parseFloat(results.product.variants[0].price) * quantity;
          }
        }

      finalLoop++;
      if (finalLoop == cart.items.length) {
        // Get qualified bonus
        let qualifiedBonusLevel = getQualifiedBonusLevel(bonusTotal, levels);
        if (qualifiedBonusLevel > 0) {
          let qualifiedBonusId = getQualifiedBonusId(qualifiedBonusLevel);
          if (!bonusId) {
            Shopify.addItem(qualifiedBonusId, 1);
          } else if (bonusId && bonusId !== qualifiedBonusId) {
            removeBonus(bonusId);
            Shopify.addItem(qualifiedBonusId, 1);
          }
        } else {
          removeBonus(bonusId);
        }
        if ($('.template-cart').length !== 0) {
          let rewardResults = calculateBonusReward(bonusTotal, levels);
          let cartLevelReward = $(".cartRewardsProgram .cartRewardLevel")[0];cartLevelReward.innerText = `Level ${qualifiedBonusLevel} Rewards`;
          let untilBonus = $(".cartRewardsProgram .untilBonusNum")[0];

          progressBarWidth = rewardResults.progress.toString();
          let progressBarWidth_filled = 100 - progressBarWidth;
          $("#cartrewardsBar").css("width", progressBarWidth_filled + "%");
          untilBonus.innerText = rewardResults.remaining;
        }
      }
      });
    });
    
  });
}

function getQualifiedBonusLevel(fwTotal, levels) {
  let qualifiedLevel = 0;
  levels.forEach((level, index) => {
    if (fwTotal > level) {
      qualifiedLevel = index + 1;
    }
  });
  return qualifiedLevel;
}

function getQualifiedBonusId(qualifiedLevel) {
  const bonusId = [
    39310116454589,
    39310858420413,
    39310870708413,
    39310873297085,
    39310876115133,
    39310879195325,
    39310912815293,
    39310917664957,
    39310919336125,
    39310922252477
  ];
  let qualifiedBonusId = bonusId[qualifiedLevel - 1];
  return qualifiedBonusId;
}

function calculateBonusReward(fwTotal, levels) {
  let untilBonusNum = 0;
  let diffNum = 0;
  let progressBarWidth = 0;
  let qualifiedIndex = 0;
  let nextQualifiedIndex = 0;
  levels.forEach((level, index) => {
    if (fwTotal > level) {
      qualifiedIndex = index;
      nextQualifiedIndex = index + 1;
    }
  });
  untilBonusNum = (levels[nextQualifiedIndex] - fwTotal).toFixed(2);
  progressBarWidth = calculateProgressBar(untilBonusNum, levels[nextQualifiedIndex]);
  return results = { "remaining": untilBonusNum, "progress": progressBarWidth};
}

function newBonusRewards(bonusTotal) {
  let cartLevelReward = $(".cartRewardsProgram .cartRewardLevel")[0];
  let untilBonus = $(".cartRewardsProgram .untilBonusNum")[0];
  let progressBar = $("#cartrewardsBar")[0];

  let level1Bonus = 150.0;
  let level2Bonus = 200.0;
  let level3Bonus = 300.0;
  let level4Bonus = 400.0;
  let level5Bonus = 500.0;
  let level6Bonus = 600.0;
  let level7Bonus = 750.0;
  let level8Bonus = 1000.0;
  let level9Bonus = 1250.0;
  let level10Bonus = 1500.0;
  let diffNum = 0;
  let untilBonusNum = 0;
  let progressBarWidth = 0;

  if (bonusTotal >= level1Bonus && bonusTotal < level2Bonus) {
    cartLevelReward.innerText = "Level 2 Rewards";
    untilBonusNum = (level2Bonus - bonusTotal).toFixed(2);
    diffNum = level2Bonus - level1Bonus;
    progressBarWidth = calculateProgressBar(untilBonusNum, level2Bonus);

  } else if (bonusTotal >= level2Bonus && bonusTotal < level3Bonus) {
    cartLevelReward.innerText = "Level 3 Rewards";
    untilBonusNum = (level3Bonus - bonusTotal).toFixed(2);
    diffNum = level3Bonus - level2Bonus;
    progressBarWidth = calculateProgressBar(untilBonusNum, level3Bonus);

  } else if (bonusTotal >= level3Bonus && bonusTotal < level4Bonus) {
    cartLevelReward.innerText = "Level 4 Rewards";
    untilBonusNum = (level4Bonus - bonusTotal).toFixed(2);
    diffNum = level4Bonus - level3Bonus;
    progressBarWidth = calculateProgressBar(untilBonusNum, level4Bonus);

  } else if (bonusTotal >= level4Bonus && bonusTotal < level5Bonus) {
    cartLevelReward.innerText = "Level 5 Rewards";
    untilBonusNum = (level5Bonus - bonusTotal).toFixed(2);
    diffNum = level5Bonus - level4Bonus;
    progressBarWidth = calculateProgressBar(untilBonusNum, level5Bonus);

  } else if (bonusTotal >= level5Bonus && bonusTotal < level6Bonus) {
    cartLevelReward.innerText = "Level 6 Rewards";
    untilBonusNum = (level6Bonus - bonusTotal).toFixed(2);
    diffNum = level6Bonus - level5Bonus;
    progressBarWidth = calculateProgressBar(untilBonusNum, level6Bonus);

  } else if (bonusTotal >= level6Bonus && bonusTotal < level7Bonus) {
    cartLevelReward.innerText = "Level 7 Rewards";
    untilBonusNum = (level7Bonus - bonusTotal).toFixed(2);
    diffNum = level7Bonus - level6Bonus;
    progressBarWidth = calculateProgressBar(untilBonusNum, level7Bonus);

  } else if (bonusTotal >= level7Bonus && bonusTotal < level8Bonus) {
    cartLevelReward.innerText = "Level 8 Rewards";
    untilBonusNum = (level8Bonus - bonusTotal).toFixed(2);
    diffNum = level8Bonus - level7Bonus;
    progressBarWidth = calculateProgressBar(untilBonusNum, level8Bonus);

  } else if (bonusTotal >= level8Bonus && bonusTotal < level9Bonus) {
    cartLevelReward.innerText = "Level 9 Rewards";
    untilBonusNum = (level9Bonus - bonusTotal).toFixed(2);
    diffNum = level9Bonus - level8Bonus;
    progressBarWidth = calculateProgressBar(untilBonusNum, level9Bonus);

  } else if (bonusTotal >= level9Bonus && bonusTotal < level10Bonus) {
    cartLevelReward.innerText = "Level 10 Rewards";
    untilBonusNum = (level10Bonus - bonusTotal).toFixed(2);
    diffNum = level10Bonus - level9Bonus;
    progressBarWidth = calculateProgressBar(untilBonusNum, level10Bonus);

  } else if (bonusTotal > level10Bonus) {
    $('.cartRewardsProgram')[0].innerHTML = `<p>The maximum bonus reward has been added to your cart</p>`
  }

  progressBarWidth = progressBarWidth.toString();
  let progressBarWidth_filled = 100 - progressBarWidth;
  $("#cartrewardsBar").css("width", progressBarWidth_filled + "%");

  untilBonus.innerText = untilBonusNum;
}

function calculateProgressBar(low, high) {
  return Math.floor((low * 100) / high);
}

function removeBonus(bonusProductId) {
  jQuery.post("/cart/update.js", "updates[" + bonusProductId + "]=0");

  setTimeout(function () {
    location.reload();
  }, 500);
}

function showSubMenu() {
  let that = $(this);
  $(".herobanner-overlay").removeClass("hidden");
  // setTimeout(function () {
  $(".herobanner-overlay").removeClass("visuallyhidden");
  that.children(".navPage-subMenu").css("visibility", "visible");
  that.children(".navPage-subMenu").css("opacity", "1");
  // }, 300);
}

function hideSubMenu() {
  $(this).children(".navPage-subMenu").css("visibility", "hidden");
  $(this).children(".navPage-subMenu").css("opacity", "0");
  $(".herobanner-overlay").addClass("visuallyhidden");
  // setTimeout(function () {
  $(".herobanner-overlay").addClass("hidden");
  // }, 300);
}

$(".navPages-item").mouseenter(showSubMenu);
$(".navPages-item").focusin(showSubMenu);
$(".navPages-item").mouseleave(hideSubMenu);
$(".navPages-item").focusout(hideSubMenu);

// SHOW/HIDE SHARE SOCIAL ICONS
let shareButton = $(".share-button");
let shareIconContainer = $(".social-sharing");

shareButton.on("mouseover", showSocial);
shareIconContainer.on("mouseover", showSocial);
shareButton.on("mouseleave", hideSocial);
shareIconContainer.on("mouseleave", hideSocial);

function showSocial() {
  shareIconContainer.css("display", "block");
}

function hideSocial() {
  shareIconContainer.css("display", "none");
}
