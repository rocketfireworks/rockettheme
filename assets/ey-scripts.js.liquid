$(document).ready(function () {
  if ($("input.sequenceAddOnCheckbox").is(":checked")) {
    // console.log("checkbox is checked");
  } else {
    // console.log("checkbox is not checked");
  }

  $("input.sequenceAddOnCheckbox").change(function () {
    Shopify.addItem(32142087290961, 1);
  });

  // Bonus Rewards
  // checkCartForBonusReward();
  window.invokeAfterSellyDataLoads(checkCartForBonusReward);
});

function checkCartForBonusReward() {
  const levels = [150, 200, 300, 400, 500, 600, 750, 1000, 1250, 1500];
  let bonusIds = [];
  let bonusTotal = 0;

  // Get cart
  $.getJSON('/cart.js', cart => {
    let finalLoop = 0;
    cart.items.forEach(item => {

      // Get bonus item in cart
      let firstString = item.sku.split('-');
      if (firstString[0] === 'bonusreward') {
        let bonusId = item.id;
        bonusIds.push(bonusId);
      };

      // Get item tags
      let url = item.url;
      let quantity = item.quantity;

      let settings = {
        type: "GET",
        url: url + ".js",
        contentType: "application/json",
        dataType: "json",
      };

      $.ajax(settings).done(results => {
        let tags = results.product.tags;
        tags = tags.split(", ");
        for (let i = 0; i < tags.length; i++) {
          if (tags[i] == "FW" || tags[i] == "FWSEQ") {
            bonusTotal = bonusTotal +
                         parseFloat(results.product.variants[0].price) * quantity;
          }
        }

      finalLoop++;
      if (finalLoop == cart.items.length) {
        // Get qualified bonus
        let qualifiedBonusLevel = getQualifiedBonusLevel(bonusTotal, levels);
        if (qualifiedBonusLevel > 0) {
          let qualifiedBonusId = getQualifiedBonusId(qualifiedBonusLevel);
          if (bonusIds.length === 0) {
            addBonus(qualifiedBonusId);
          } else {
            let correctBonus = false;
            bonusIds.forEach(bonusId => {
              if (bonusId !== qualifiedBonusId) {
                Shopify.removeItem(bonusId, function (cart) {
                  Shopify.updateQuickCart(cart);
                });
              } else {
                correctBonus = true;
              }
            });

            if (correctBonus === false) {
              addBonus(qualifiedBonusId);
            }
          }
        } else {
          bonusIds.forEach(bonusId => {
            Shopify.removeItem(bonusId, function (cart) {
              Shopify.updateQuickCart(cart);
            });
          });
        }
        
        let rewardResults = calculateBonusReward(bonusTotal, levels);
        progressBarWidth = rewardResults.progress.toString();
        let progressBarWidth_filled = 100 - progressBarWidth;

        $('.promo-bar .bonusRewards-message').html(`<b>$${rewardResults.remaining}</b> away from <b>Bonus Rewards Level ${qualifiedBonusLevel + 1}</b>! <i class="fas fa-gift"></i>`);
        $('.promo-bar .bonusRewards-bar').css('width', progressBarWidth_filled + '%');

        if ($('.template-cart').length !== 0) {
          let cartLevelReward = $('.cartRewardsProgram .cartRewardLevel')[0];
          cartLevelReward.innerText = `Bonus Rewards Level ${qualifiedBonusLevel + 1}`;
          let untilBonus = $('.cartRewardsProgram .untilBonusNum')[0];
          untilBonus.innerText = '$' + rewardResults.remaining;
          $("#cartrewardsBar").css('width', progressBarWidth_filled + '%' );
        }
      }
      });
    });
    
  });
}

function getQualifiedBonusLevel(fwTotal, levels) {
  let qualifiedLevel = 0;
  levels.forEach((level, index) => {
    if (fwTotal > level) {
      qualifiedLevel = index + 1;
    }
  });
  return qualifiedLevel;
}

function getQualifiedBonusId(qualifiedLevel) {
  const bonusId = [
    39310116454589,
    39310858420413,
    39310870708413,
    39310873297085,
    39310876115133,
    39310879195325,
    39310912815293,
    39310917664957,
    39310919336125,
    39310922252477
  ];
  let qualifiedBonusId = bonusId[qualifiedLevel - 1];
  return qualifiedBonusId;
}

function calculateBonusReward(fwTotal, levels) {
  let untilBonusNum = 0;
  let diffNum = 0;
  let progressBarWidth = 0;
  let qualifiedIndex = 0;
  let nextQualifiedIndex = 0;
  levels.forEach((level, index) => {
    if (fwTotal > level) {
      qualifiedIndex = index;
      nextQualifiedIndex = index + 1;
    }
  });
  untilBonusNum = (levels[nextQualifiedIndex] - fwTotal).toFixed(2);
  progressBarWidth = calculateProgressBar(untilBonusNum, levels[nextQualifiedIndex]);
  return results = { "remaining": untilBonusNum, "progress": progressBarWidth};
}

function calculateProgressBar(low, high) {
  return Math.floor((low * 100) / high);
}

function addBonus(bonusProductId, callback) {
  let quantity = 1;
  let params = {
    type: 'POST',
    url: '/cart/add.js',
    data: 'quantity=' + quantity + '&id=' + bonusProductId,
    dataType: 'json',
    success: function(line_item) {
      if ((typeof callback) === 'function') {
        callback(line_item);
      }
      else {
        Shopify.getCart(Shopify.updateQuickCart);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      Shopify.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
}

function showSubMenu() {
  let that = $(this);
  $(".herobanner-overlay").removeClass("hidden");
  // setTimeout(function () {
  $(".herobanner-overlay").removeClass("visuallyhidden");
  that.children(".navPage-subMenu").css("visibility", "visible");
  that.children(".navPage-subMenu").css("opacity", "1");
  // }, 300);
}

function hideSubMenu() {
  $(this).children(".navPage-subMenu").css("visibility", "hidden");
  $(this).children(".navPage-subMenu").css("opacity", "0");
  $(".herobanner-overlay").addClass("visuallyhidden");
  // setTimeout(function () {
  $(".herobanner-overlay").addClass("hidden");
  // }, 300);
}

$(".navPages-item").mouseenter(showSubMenu);
$(".navPages-item").focusin(showSubMenu);
$(".navPages-item").mouseleave(hideSubMenu);
$(".navPages-item").focusout(hideSubMenu);

// SHOW/HIDE SHARE SOCIAL ICONS
let shareButton = $(".share-button");
let shareIconContainer = $(".social-sharing");

shareButton.on("mouseover", showSocial);
shareIconContainer.on("mouseover", showSocial);
shareButton.on("mouseleave", hideSocial);
shareIconContainer.on("mouseleave", hideSocial);

function showSocial() {
  shareIconContainer.css("display", "block");
}

function hideSocial() {
  shareIconContainer.css("display", "none");
}
